{
  "rules": {
    "accessor-pairs": [2, { "getWithoutSet": true }],
    "array-bracket-spacing": 0,
    "brace-style": [2, "1tbs", { "allowSingleLine": true }],
    "block-scoped-var": [2],
    "consistent-this": [1],
    "camelcase": 0,
    "comma-spacing": [2, {"before": false, "after": true}],
    "comma-style": [2, "last"],
    "computed-property-spacing": 0,
    "complexity": [1],
    "consistent-return": 2,

    // This is different than SC. This rule below follows Google Closure rule. Feel
    // free to put 0 back to be compatible with SC code rules.
    "dot-location": 2,
    "dot-notation": 0,
    "indent": [2, 2, { "SwitchCase": 1, "VariableDeclarator": 2 }],
    "key-spacing": [2, {"beforeColon": false, "afterColon": true, "mode": "minimum"}],
    "max-len": [1, 120, 2],
    "guard-for-in": [1],
    "no-catch-shadow": [2],
    "no-dupe-args": [2],
    "no-dupe-keys": [2],
    "no-cond-assign": [2],

    // If we 'return' in the if(), there is no point in having an 'else'. If is bugs you, put it back to 0.
    "no-else-return": 0,
    "no-empty": [1],
    "no-ex-assign": [2],
    "no-extra-parens": [1],
    "no-func-assign": [2],
    "no-implicit-coercion": [2, {"boolean": false, "number": true, "string": false}],
    "no-inline-comments": 0,
    "no-lonely-if": 0,
    "no-lone-blocks": [2],
    "no-loop-func": 2,

    // This is a new rule I am introducing to insure that constants are created instead
    // of using numerical values directly in the code. Feel free to remove the line if it bugs you.
    "no-magic-numbers": [1, { "ignore": [-1, 0, 1, 2, 100, -90, 90, 80, 443] }],
    "no-mixed-requires": 0,
    "no-multiple-empty-lines": [2, {"max": 100, "maxEOF": 1}],
    "no-multi-spaces": 0,
    // "no-invalid-this": 2,

    // We should have the positive condition first.  If is bugs you, put it back to 0.
    "no-negated-condition": 1,

    // Ternary operator should be simple and it becomes obfuscated when we nest them
    // together. If is bugs you, put it back to 0.
    "no-nested-ternary": 1,
    "no-unneeded-ternary": 2,
    "no-redeclare": [2, {"builtinGlobals": true}],
    "no-unused-vars": [2, { "args": "none", "vars": "all" }],
    "no-use-before-define": [2, "nofunc"],
    "no-useless-concat": 0,
    "no-warning-comments": 0,
    "no-param-reassign": [2],
    "no-shadow": [2],
    "no-throw-literal": [2],
    "no-unreachable": [2],
    "object-curly-spacing": 0,
    // This forces each variable declaration to be on its own line. If is bugs you, put it back to 0.
    "one-var": [0, { "var": "never", "let": "never", "const": "never" }],
    "operator-assignment": 0,
    "padded-blocks": 0,
    "quote-props": [2, "as-needed", { "keywords": true, "unnecessary": false }],
    "quotes": [2, "single", "avoid-escape"],
    "require-jsdoc": [2, { "require": {
        "FunctionDeclaration": true,
        "MethodDefinition": true,
        "ClassDeclaration": true
    } }],
    "valid-jsdoc": [2, {
        "requireParamDescription": false,
        "requireReturnDescription": false,
        "requireReturn": false
    }],
    "semi-spacing": [2, {"before": false, "after": true}],

    "strict": [2, "safe"],

    "space-in-parens": 0,
    "spaced-comment": [2, "always", {"exceptions": ["-","*","=","/"]}],

    "wrap-iife": [2, "inside"]
  },
  "env": {
    "browser": true
  },
  "extends": "google",
  "globals": {
    "include": true,
    "exportModule": true,
    "__dirname": true,
    "require": true,
    "dcodeIO": true,
    "describe": true,
    "it": true,
    "expect": true,
    "afterEach": true,
    "beforeEach": true,
    "callPhantom": true,
    "$": true,
    "before": true,
    "after": true
  }
}
